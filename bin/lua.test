#!./build/bin/levee


function dirname(str)
	if str:match(".-/.-") then
		local name = string.gsub(str, "(.*/)(.*)", "%1")
		return name
	else
		return ''
	end
end

local path = dirname(arg[0])

package.path = string.format(
	'%s/?.lua;%s/?/init.lua;%s/../?/init.lua;%s', path, path, path, package.path)

local math = require('math')
local io = require('io')
local os = require('os')

-- setup global variables
assert = require('luassert')
debug = require('debug')


local usage = [[
Usage: lua.test [-k <match>] <path>]]


function bad_usage()
	print(usage)
	os.exit(1)
end


function parse_argv()
	local path
	local match

	local i = 1

	while i <= #arg do
		if arg[i] == "-k" then
			i = i + 1
			if not arg[i] then bad_usage() end
			match = arg[i]

		else
			if path then bad_usage() end
			path = arg[i]
		end

		i = i + 1
	end

	if not path then bad_usage() end

	return {path = path, match = match}
end


function scan(path)
	local command = ('find %s -type f -name "*.lua"'):format(path)
	return io.popen(command):lines()
end


function main(argv)
	local status = 0

	for script in scan(argv.path) do
		local traceback
		local M = assert(loadfile(script))()

		local skipped = 0
		local longest = 0
		local to_run = {}
		for name in pairs(M) do
			if argv.match and not string.find(name, argv.match) then
				skipped = skipped + 1
			else
				table.insert(to_run, name)
				longest = math.max(#name, longest)
			end
		end

		table.sort(to_run)
		local pattern = "%s::%-"..longest.."s"

		for i, name in ipairs(to_run) do
			io.write(pattern:format(script, name))
			local success = xpcall(M[name],
				function(err)
					print(' FAIL')
					print('-----')
					print(debug.traceback())
					print(err)
					print()
					status = 1
				end)
			if success then
				print(' PASS')
			end
		end
	end

	return status
end


os.exit(main(parse_argv()))
